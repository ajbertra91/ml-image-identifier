{"version":3,"sources":["components/WebcamCapture/WebcamCapture.jsx","components/ImageClassifier/ImageClassifier.jsx","components/App/App.js","index.js"],"names":["videoConstraints","width","height","facingMode","WebcamCapture","_ref","postCaptureCb","webcamRef","Object","objectWithoutProperties","React","useRef","_useState","useState","_useState2","slicedToArray","image","setImage","_useState3","_useState4","isImageCaptured","setIsImageCaptured","_useState5","_useState6","setHeight","_useState7","_useState8","setWidth","capture","useCallback","imageSrc","current","getScreenshot","useEffect","document","defaultView","visualViewport","react_default","a","createElement","className","Fragment","react_webcam_default","audio","ref","screenshotFormat","src","alt","id","onClick","e","preventDefault","ImageClassifier","predictions","setPredictions","isClassifying","setIsClassifying","WebcamCapture_WebcamCapture","classifier","ml5","console","info","log","getElementById","predict","err","results","then","length","map","pred","i","label","confidence","Math","floor","key","renderPredictions","App","components_ImageClassifier_ImageClassifier","ReactDOM","render","StrictMode","components_App_App"],"mappings":"kUAIMA,EAAmB,CACvBC,MAAO,IACPC,OAAQ,IACRC,WAAY,QAGDC,EAAgB,SAAAC,GAA+B,IAA7BC,EAA6BD,EAA7BC,cACvBC,GADoDC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,mBACxCK,IAAMC,OAAO,OAD2BC,EAEhCC,mBAAS,IAFuBC,EAAAN,OAAAO,EAAA,EAAAP,CAAAI,EAAA,GAEnDI,EAFmDF,EAAA,GAE5CG,EAF4CH,EAAA,GAAAI,EAGZL,oBAAS,GAHGM,EAAAX,OAAAO,EAAA,EAAAP,CAAAU,EAAA,GAGnDE,EAHmDD,EAAA,GAGlCE,EAHkCF,EAAA,GAAAG,EAI9BT,qBAJ8BU,EAAAf,OAAAO,EAAA,EAAAP,CAAAc,EAAA,GAInDpB,EAJmDqB,EAAA,GAI3CC,EAJ2CD,EAAA,GAAAE,EAKhCZ,qBALgCa,EAAAlB,OAAAO,EAAA,EAAAP,CAAAiB,EAAA,GAKnDxB,EALmDyB,EAAA,GAK5CC,EAL4CD,EAAA,GAOpDE,EAAUlB,IAAMmB,YACpB,WACE,IAAMC,EAAWvB,EAAUwB,QAAQC,gBACnCf,EAASa,GACTT,GAAmB,KAevB,OAZAY,oBAAU,WACRN,EAASO,SAASC,YAAYC,eAAenC,OAC7CuB,EAAsD,OAA5CU,SAASC,YAAYC,eAAenC,QAC7C,IAEHgC,oBAAU,WACJb,IACFd,IACAe,GAAmB,KAEpB,CAACD,IAGFiB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACF,KAAVxB,EACGqB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAG,SAAA,KACAJ,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CACEK,OAAO,EACPzC,OAAQA,EACR0C,IAAKrC,EACLsC,iBAAiB,aACjB5C,MAAOA,EACPD,iBAAkBA,KAGpBqC,EAAAC,EAAAC,cAAA,OAAKO,IAAK9B,EAAO+B,IAAI,GAAGC,GAAG,UAG/BX,EAAAC,EAAAC,cAAAF,EAAAC,EAAAG,SAAA,KACa,KAAVzB,EACGqB,EAAAC,EAAAC,cAAA,UAAQU,QAAS,SAACC,GAAQA,EAAEC,iBAAkBlC,EAAS,KAAQuB,UAAU,cAAzE,gBAEAH,EAAAC,EAAAC,cAAA,UAAQU,QAAS,SAACC,GAAQA,EAAEC,iBAAkBvB,KAAcY,UAAU,cAAtE,eCFCY,EAlDS,WAAM,IAAAxC,EACUC,mBAAS,IADnBC,EAAAN,OAAAO,EAAA,EAAAP,CAAAI,EAAA,GACrByC,EADqBvC,EAAA,GACRwC,EADQxC,EAAA,GAAAI,EAEcL,oBAAS,GAFvBM,EAAAX,OAAAO,EAAA,EAAAP,CAAAU,EAAA,GAErBqC,EAFqBpC,EAAA,GAENqC,EAFMrC,EAAA,GA0C5B,OACEkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAACkB,EAAD,CAAenD,cAxCC,WAClBkD,GAAiB,GAEjB,IAAME,EAAaC,kBAAoB,YAEvC,WACEC,QAAQC,KAAKH,GACbE,QAAQE,IAAI,mBAGR9C,EAAQkB,SAAS6B,eAAe,SAEtCL,EAAWM,QAAQhD,EAAO,EAAG,SAAUiD,EAAKC,GAC1C,OAAOA,IAENC,KAAK,SAACD,GACLV,GAAiB,GACjBF,EAAeY,QAwBfX,EANIlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAdC,WACxB,GAAIa,EAAYe,OAAS,EACvB,OAAOf,EAAYgB,IAAI,SAACC,EAAMC,GAAM,IAC5BC,EAAsBF,EAAtBE,MAAOC,EAAeH,EAAfG,WAGb,OADAA,EAAaC,KAAKC,MAAmB,IAAbF,GAAsB,IAAM,IAElDpC,EAAAC,EAAAC,cAAA,OAAKqC,IAAKL,EAAI,IAAKA,EAAI,EAAvB,iBAAwCC,EAAxC,OAAmDC,EAAnD,OAa+BI,KCrC1BC,MARf,WACE,OACEzC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACwC,EAAD,QCHNC,IAASC,OACP5C,EAAAC,EAAAC,cAACF,EAAAC,EAAM4C,WAAP,KACE7C,EAAAC,EAAAC,cAAC4C,EAAD,OAEFjD,SAAS6B,eAAe","file":"static/js/main.f498f1b8.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './WebcamCaptureStyles.css';\nimport Webcam from \"react-webcam\";\n\nconst videoConstraints = {\n  width: 220,\n  height: 200,\n  facingMode: \"user\"\n};\n\nexport const WebcamCapture = ({postCaptureCb, ...props}) => {\n  const webcamRef = React.useRef(null);\n  const [image, setImage] = useState('');\n  const [isImageCaptured, setIsImageCaptured] = useState(false);\n  const [height, setHeight] = useState();\n  const [width, setWidth] = useState();\n\n  const capture = React.useCallback(\n    () => {\n      const imageSrc = webcamRef.current.getScreenshot();\n      setImage(imageSrc);\n      setIsImageCaptured(true);\n    });\n\n  useEffect(() => {\n    setWidth(document.defaultView.visualViewport.width);\n    setHeight(document.defaultView.visualViewport.width * 0.90905);\n  }, []);\n\n  useEffect(() => {\n    if (isImageCaptured) {\n      postCaptureCb();\n      setIsImageCaptured(false);\n    }\n  }, [isImageCaptured]);\n\n  return (\n    <div className=\"webcam-container\">\n      <div className=\"webcam-img\">\n        {image === ''\n          ? <>\n            <Webcam\n              audio={false}\n              height={height}\n              ref={webcamRef}\n              screenshotFormat=\"image/jpeg\"\n              width={width}\n              videoConstraints={videoConstraints}\n            />\n            </>\n          : <img src={image} alt=\"\" id=\"image\" />\n        }\n\n        <>\n          {image !== ''\n            ? <button onClick={(e) => { e.preventDefault(); setImage(''); }} className=\"webcam-btn\"\n                >Retake Image</button>\n            : <button onClick={(e) => { e.preventDefault(); capture(); }} className=\"webcam-btn\"\n                >Capture</button>\n          }\n        </>\n      </div>\n    </div>\n  );\n};","import React, { useState } from 'react';\nimport * as ml5 from \"ml5\";\nimport \"./ImageClassifierStyles.css\";\nimport { WebcamCapture } from '../WebcamCapture/WebcamCapture';\n\nconst ImageClassifier = () => {\n  const [predictions, setPredictions] = useState([]);\n  const [isClassifying, setIsClassifying] = useState(false);\n\n  const classifyImg = () => {\n    setIsClassifying(true);\n    // MobileNet is a pretrained model\n    const classifier = ml5.imageClassifier('MobileNet', modelLoaded);\n\n    function modelLoaded() {\n      console.info(classifier);\n      console.log('Model Loaded!');\n    }\n\n    const image = document.getElementById('image');\n    // Make a prediction with a selected image\n    classifier.predict(image, 5, function (err, results) {\n      return results;\n    })\n      .then((results) => {\n        setIsClassifying(false);\n        setPredictions(results);\n      })\n  }\n\n  const renderPredictions = () => {\n    if (predictions.length > 0) {\n      return predictions.map((pred, i) => {\n        let { label, confidence } = pred;\n        // round the confidence with 2 decimal\n        confidence = Math.floor(confidence * 10000) / 100 + \"%\";\n        return (\n          <div key={i + \"\"}>{i + 1}. Prediction: {label} at {confidence} </div>\n        )\n      })\n    }\n  }\n\n  const renderLoader = () => {\n    return (<div className=\"loader\"></div>);\n  }\n\n  return (\n    <div className=\"ImageClassifier\">\n      <WebcamCapture postCaptureCb={classifyImg} />\n      { isClassifying ? renderLoader() : renderPredictions() }\n    </div>\n  );\n}\n\nexport default ImageClassifier;","// import Sketch from \"./components/sketch/sketch\";\nimport React from 'react';\nimport './App.css';\nimport ImageClassifier from '../ImageClassifier/ImageClassifier';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ImageClassifier />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}